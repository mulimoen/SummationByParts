use super::*;

pub struct Interpolation4;

impl Interpolation4 {
    const F2C_DIAG: &'static [[Float; 7]] = &[[
        -1.0 / 32.0,
        0.0,
        9.0 / 32.0,
        1.0 / 2.0,
        9.0 / 32.0,
        0.0,
        -1.0 / 32.0,
    ]];
    const F2C_BLOCK: &'static [[Float; 10]] = &[
        [
            0.15745752473496450946063e23 / 0.30759034429175640424160e23,
            0.74943057537715447001883e23 / 0.104580717059197177442144e24,
            0.1733236963142549444853e22 / 0.522903585295985887210720e24,
            -0.2994697914858864417917e22 / 0.26145179264799294360536e23,
            -0.641055020554612856232e21 / 0.16340737040499558975335e23,
            -0.31200598857765495755439e23 / 0.522903585295985887210720e24,
            -0.422055004077148591739e21 / 0.6536294816199823590134e22,
            -0.16670527152025920991407e23 / 0.522903585295985887210720e24,
            0.53414892210822113304e20 / 0.3268147408099911795067e22,
            0.32274131131983102388471e23 / 0.522903585295985887210720e24,
        ],
        [
            -0.6225999401446722477711e22 / 0.907391515660681392512720e24,
            0.1036706267989606133475e22 / 0.3075903442917564042416e22,
            0.328926383150495585114867e24 / 0.907391515660681392512720e24,
            0.89897263376416194502629e23 / 0.362956606264272557005088e24,
            0.1282110041109225712464e22 / 0.56711969728792587032045e23,
            0.24913624504973179743933e23 / 0.1814783031321362785025440e25,
            0.1036353973336644936129e22 / 0.22684787891517034812818e23,
            0.41992032737257490852109e23 / 0.1814783031321362785025440e25,
            -0.106829784421644226608e21 / 0.11342393945758517406409e23,
            -0.65509482089877943540197e23 / 0.1814783031321362785025440e25,
        ],
        [
            0.6225999401446722477711e22 / 0.1322638480454552538238880e25,
            -0.15796094028352692249389e23 / 0.264527696090910507647776e24,
            0.40307836352152312671e20 / 0.30759034429175640424160e23,
            0.41110375639957470563661e23 / 0.132263848045455253823888e24,
            0.22428220801327117461888e23 / 0.41332452514204766819965e23,
            0.366744409069694352232131e24 / 0.1322638480454552538238880e25,
            -0.806542934441844097041e21 / 0.16532981005681906727986e23,
            -0.80111035662200679366237e23 / 0.1322638480454552538238880e25,
            0.53414892210822113304e20 / 0.8266490502840953363993e22,
            0.34196570783806579914981e23 / 0.1322638480454552538238880e25,
        ],
    ];

    const C2F_DIAG: &'static [[Float; 4]] = &[
        [0.0, 1.0, 0.0, 0.0],
        [-1.0 / 16.0, 9.0 / 16.0, 9.0 / 16.0, -1.0 / 16.0],
    ];
    #[rustfmt::skip]
    const C2F_BLOCK: &'static [[Float; 7]] = &[
        [2305422334878123.0/2251799813685248.0, -116682606115696273.0/2449958197289549824.0,  116682606115696271.0/4899916394579099648.0, 0.0, 0.0, 0.0, 0.0],
        [13716032226970759.0/33214047251857408.0, 6071594962398535.0/9007199254740992.0, -370046899066617177.0/4251398048237748224.0, 0.0, 0.0, 0.0, 0.0],
        [129931657769535863.0/49575624698094419968.0, 192639692900606809.0/193654783976931328.0,      377708307469581.0/144115188075855872.0, 0.0, 0.0, 0.0, 0.0],
        [-70155234265236545.0/882705526964617216.0, 263247068288746603.0/441352763482308608.0, 30095982505478077.0/55169095435288576.0, -1.0/16.0, 0.0, 0.0, 0.0],
        [-48056522745236605.0/1729382256910270464.0, 64075363660315477.0/1152921504606846976.0, 52541429192657303.0/54043195528445952.0, 0.0, 0.0, 0.0, 0.0],
        [-1522750502383427.0/36028797018963968.0, 7295481936885541.0/216172782113783808.0, 71596091562607345.0/144115188075855872.0, 147.0/256.0, -1.0/16.0, 0.0, 0.0],
        [-39549054396350587.0/864691128455135232.0, 64741671534788765.0/576460752303423488.0, -25192617138438183.0/288230376151711744.0, 49.0/48.0, 0.0, 0.0, 0.0],
        [-19526589507951803.0/864691128455135232.0, 131163408473299267.0/2305843009213693952.0, -15639330559927497.0/144115188075855872.0, 147.0/256.0, 9.0/16.0, -1.0/16.0, 0.0],
        [80084669807060717.0/6917529027641081856.0, -320338679228242837.0/13835058055282163712.0, 106779559742747605.0/9223372036854775808.0, 0.0, 1.0, 0.0, 0.0],
        [37803466236726359.0/864691128455135232.0, -76732832380295345.0/864691128455135232.0, 53407021400548805.0/1152921504606846976.0, -49.0/768.0, 9.0/16.0, 9.0/16.0, -1.0/16.0],
    ];
}

impl InterpolationOperator for Interpolation4 {
    fn fine2coarse(&self, fine: ArrayView1<Float>, coarse: ArrayViewMut1<Float>) {
        assert_eq!(fine.len(), 2 * coarse.len() - 1);
        super::interpolate(
            fine,
            coarse,
            ndarray::arr2(Self::F2C_BLOCK).view(),
            ndarray::arr2(Self::F2C_DIAG).view(),
            (3, 2),
        )
    }
    fn coarse2fine(&self, coarse: ArrayView1<Float>, fine: ArrayViewMut1<Float>) {
        assert_eq!(fine.len(), 2 * coarse.len() - 1);
        super::interpolate(
            coarse,
            fine,
            ndarray::arr2(Self::C2F_BLOCK).view(),
            ndarray::arr2(Self::C2F_DIAG).view(),
            (4, 1),
        )
    }
}

#[test]
fn test_inter4() {
    test_interpolation_operator(Interpolation4, false);
}
